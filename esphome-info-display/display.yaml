<<: !include weather-icons.yaml

display:
  - platform: ili9xxx
    model: M5STACK
    update_interval: 5s
    auto_clear_enabled: true
    dc_pin: 27
    cs_pin: 14
    reset_pin: 33
    data_rate: 40000000
    id: tft_ha
    invert_display: false
    pages:
      - id: loading
        lambda: |- #cpp
          auto time = id(sntp_time).now();

          if (time.is_valid()) {
            it.fill(Color(250,250,250));
            it.strftime(160, 120, id(LargeFont), Color(20,20,20), TextAlign::CENTER, "%Y-%m-%d %H:%M", time);
          } else {
            it.printf(160, 120, id(LargeFont), TextAlign::CENTER, "Loading...");
          }
      - id: energy
        lambda: |- #cpp
          auto time = id(sntp_time).now();
          if (time.is_valid()) {

            it.strftime(0, 0, id(LargeFont),TextAlign::TOP_LEFT, "%Y-%m-%d", time);
            it.strftime(290, 0, id(LargeFont),TextAlign::TOP_RIGHT, "%H:%M", time);



            auto graph = id(multi_voltage_graph);
            it.graph(3, 32, id(multi_voltage_graph), my_red);

            if (id(pv_power_0).has_state()) {
              it.printf(1, 152, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV0 %3.0f W", id(pv_power_0).state);
              it.printf(1, 172, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV1 %3.0f W", id(pv_power_1).state);
              it.printf(1, 192, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV2 %3.0f W", id(pv_power_2).state);
              it.printf(160, 152, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_0).state);
              it.printf(160, 172, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_1).state);
              it.printf(160, 192, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_2).state);
            }

            if (!isnan(id(battery_0_level).state)) {
              esphome::display::hbar(&it, 170, 154, 75, 20, 100, id(SmallFont), 0, id(battery_0_level));
              esphome::display::hbar(&it, 170, 174, 75, 20, 100, id(SmallFont), 120, id(battery_1_level));
              esphome::display::hbar(&it, 170, 194, 75, 20, 100, id(SmallFont), 240, id(battery_2_level));
            }
          }
      - id: weather
        lambda: |- #cpp
          static std::map<std::string, BaseImage*> weather_state {
              { "sunny", id(sunny) },
              { "clear-night", id(clearnight) },
              { "cloudy", id(cloudy) },
              { "partlycloudy", id(partlycloudy) },
              { "partly-cloudy-night", id(partlycloudynight) },
              { "rainy", id(rain) },
              { "pouring", id(rain) },
              { "hail", id(hail) },
              { "snowy", id(snow) },
              { "windy", id(wind) },
              { "fog", id(fog) },
              { "lightning", id(lightning) }
          };
          if (id(outside_temp).has_state()) {

            float min_temp = 30; // Blue color
            float max_temp = 90.0; // Red color
            float current_temp = id(outside_temp).state;
            if (current_temp < min_temp) current_temp = min_temp;
            if (current_temp > max_temp) current_temp = max_temp;

            float ratio = (current_temp - min_temp) / (max_temp - min_temp);
            float hue = 220 - (ratio*140);
            auto shadow_color = ESPHSVColor(hue, 150, 50).to_rgb();
            auto highlight_color = ESPHSVColor(hue, 200, 250).to_rgb();
            auto textcolor = ESPHSVColor(hue, 250, 100).to_rgb();
            it.printf(10, 66, id(LargeFont), Color(200, 200, 200), TextAlign::TOP_LEFT, "Outside");
            it.printf(200, 65, id(LargeFont), highlight_color, TextAlign::TOP_RIGHT, "%4.0f째F", id(outside_temp).state);
            it.printf(202, 67, id(LargeFont), shadow_color, TextAlign::TOP_RIGHT, "%4.0f째F", id(outside_temp).state);
            it.printf(201, 66, id(LargeFont), textcolor, TextAlign::TOP_RIGHT, "%4.0f째F", id(outside_temp).state);
          }
          it.line(10, 105, 310, 105, Color(200, 200, 200));
          it.printf(10, 110, id(LargeFont), Color(200, 200, 200), TextAlign::TOP_LEFT, "Inside");
          it.printf(210, 110, id(LargeFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, "%4.1f째F", id(temperature).state);
          it.printf(312, 110, id(SmallFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, "%1.1f%%", id(humidity).state);

          show_sensor(&it, 210, 140, id(LargeFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, id(bme280_temperature), false);
          show_sensor(&it, 312, 140, id(SmallFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, id(humidity2), false);


          if (id(weather_condition).has_state()) {
            auto weather_icon = weather_state.find(id(weather_condition).state);
            if (weather_icon != weather_state.end()) {
              it.image(310, 40, weather_icon->second,  ImageAlign::TOP_RIGHT);

            } else {
              it.printf(310, 45, id(LargeFont), TextAlign::TOP_RIGHT, id(weather_condition).state.c_str());
              it.printf(310, 47, id(LargeFont), TextAlign::TOP_RIGHT, id(weather_condition).state.c_str());
              it.printf(310, 46, id(LargeFont), TextAlign::TOP_RIGHT, id(weather_condition).state.c_str());
            }
          }
          auto time = id(sntp_time).now();
          if (time.is_valid()) {
            it.strftime(0, 0, id(LargeFont),TextAlign::TOP_LEFT, "%Y-%m-%d", time);
            it.strftime(312, 0, id(LargeFont),TextAlign::TOP_RIGHT, "%H:%M", time);
            auto lineColor = Color(250, 250, 0);
            it.horizontal_line(0, 31, 320, lineColor.fade_to_black(200));
            it.horizontal_line(0, 32, 318, lineColor.fade_to_black(150));
            it.horizontal_line(0, 33, 316, lineColor.fade_to_black(100));
            it.horizontal_line(0, 34, 314, lineColor);
          }
