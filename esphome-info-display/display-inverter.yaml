color:
  - id: my_red
    red: 100%
    green: 20%
    blue: 20%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 20%
    green: 20%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: black
    red: 0%
    green: 0%
    blue: 0%
  - id: white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "gfonts://Share Tech Mono"
    id: LargeFont
    size: 28
  - file: "gfonts://Inconsolata"
    id: SmallFont
    size: 16

graph:
  - id: multi_voltage_graph
    duration: 30min
    x_grid: 5min
    y_grid: 8
    width: 314
    height: 110
    traces:
      - sensor: pv_power_0
        line_type: SOLID
        line_thickness: 2
        color: my_red
      - sensor: pv_power_1
        line_type: SOLID
        line_thickness: 2
        color: my_blue
      - sensor: pv_power_2
        line_type: SOLID
        line_thickness: 2
        color: my_green


<<: !include weather-icons.yaml

display:
  - platform: ili9xxx
    model: M5STACK
    update_interval: 10s
    auto_clear_enabled: true
    dc_pin: 27
    cs_pin: 14
    reset_pin: 33
    data_rate: 40000000
    id: tft_ha
    invert_colors: false
    pages:
      - id: inverter_page
        lambda: |- #cpp
          widget::TimeWidget(&it);
          int x = 105;
          int y = 20;
          sensor::Sensor* mysensors[] = {
            inverter0_ac_output_active_power,
            inverter0_float_voltage,
            inverter0_battery_charging_current,
            inverter0_battery_discharge_current,
            inverter0_battery_voltage,
            inverter0_bus_voltage,
            inverter0_pv_input_voltage,
            inverter0_pv_input_current_for_battery,
            inverter0_pv_power_balance,
          };

          for (int i=0; i < sizeof(mysensors)/sizeof(mysensors[0]); i++) {
            auto sensor = id(&mysensors[i]);
            y += 20;
            if (y >= 220) {
              y = 20;
              x += 100;
            }
            widget::show_sensor(&it, x, y, id(SmallFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, sensor);
          }
          // widget::show_sensor(&it, 170, 154, id(SmallFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, id(inverter0_ac_output_active_power));
          // widget::show_sensor(&it, 170, 174, id(SmallFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, id(inverter0_float_voltage));
      - id: energy
        lambda: |- #cpp
          widget::TimeWidget(&it);

          auto graph = id(multi_voltage_graph);
          it.graph(3, 35, id(multi_voltage_graph), my_red);
          const Color line_color(250,240,230);
          it.vertical_line(82, 151, 86, line_color);
          it.vertical_line(164, 151, 86, line_color);
          it.vertical_line(244, 151, 86, line_color);

          if (id(pv_power_0).has_state()) {
            it.printf(1, 152, id(SmallFont), line_color, TextAlign::TOP_LEFT, "PV0 %3.0f W", id(pv_power_0).state);
            it.printf(161, 152, id(SmallFont), line_color, TextAlign::TOP_RIGHT,
                "%1.3f %s",
                id(pv_yield_0).state,
                id(pv_yield_0).get_unit_of_measurement().c_str()
            );
          }
          if (id(pv_power_1).has_state()) {
            it.printf(1, 172, id(SmallFont), line_color, TextAlign::TOP_LEFT, "PV1 %3.0f W", id(pv_power_1).state);
            it.printf(161, 172,
                    id(SmallFont), line_color, TextAlign::TOP_RIGHT,
                    "%1.3f %s",
                    id(pv_yield_1).state,
                    id(pv_yield_1).get_unit_of_measurement().c_str()
            );
          }
          if (id(pv_power_2).has_state()) {
            it.printf(1, 192, id(SmallFont), line_color, TextAlign::TOP_LEFT, "PV2 %3.0f W", id(pv_power_2).state);
            it.printf(161, 192, id(SmallFont), line_color, TextAlign::TOP_RIGHT,
                "%1.3f %s",
                id(pv_yield_2).state,
                id(pv_yield_2).get_unit_of_measurement().c_str()
            );
          }

          widget::hbar(&it, 170, 154, 150, 20, 100, id(SmallFont), 80, id(battery_0_level));
          widget::hbar(&it, 170, 174, 150, 20, 100, id(SmallFont), 225, id(battery_1_level));
          widget::hbar(&it, 170, 194, 150, 20, 100, id(SmallFont), 140, id(battery_2_level));
          widget::hbar(&it, 170, 214, 150, 20, 100, id(SmallFont), 20, id(battery_3_level));

