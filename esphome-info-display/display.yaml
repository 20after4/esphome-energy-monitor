color:
  - id: my_red
    red: 100%
    green: 20%
    blue: 20%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 20%
    green: 20%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: black
    red: 0%
    green: 0%
    blue: 0%
  - id: white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "gfonts://Share Tech Mono"
    id: LargeFont
    size: 28
  - file: "gfonts://Inconsolata"
    id: SmallFont
    size: 16



graph:
  - id: multi_voltage_graph
    duration: 90min
    x_grid: 15min
    y_grid: 8
    width: 314
    height: 120
    traces:
      - sensor: pv_power_0
        line_type: SOLID
        line_thickness: 2
        color: my_red
      - sensor: pv_power_1
        line_type: SOLID
        line_thickness: 2
        color: my_blue
      - sensor: pv_power_2
        line_type: SOLID
        line_thickness: 2
        color: my_green


<<: !include weather-icons.yaml

display:
  - platform: ili9xxx
    model: M5STACK
    update_interval: 5s
    auto_clear_enabled: true
    dc_pin: 27
    cs_pin: 14
    reset_pin: 33
    data_rate: 40000000
    id: tft_ha
    invert_display: false
    pages:
      - id: loading
        lambda: |- #cpp
          auto time = id(sntp_time).now();

          if (time.is_valid()) {
            it.fill(Color(250,250,250));
            it.strftime(160, 120, id(LargeFont), Color(20,20,20), TextAlign::CENTER, "%Y-%m-%d %H:%M", time);
          } else {
            it.printf(160, 120, id(LargeFont), TextAlign::CENTER, "Loading...");
          }
      - id: energy
        lambda: |- #cpp
          auto time = id(sntp_time).now();
          if (time.is_valid()) {
            widget::TimeWidget(&it);

            auto graph = id(multi_voltage_graph);
            it.graph(3, 32, id(multi_voltage_graph), my_red);

            if (id(pv_power_0).has_state()) {
              it.printf(1, 152, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV0 %3.0f W", id(pv_power_0).state);
              it.printf(1, 172, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV1 %3.0f W", id(pv_power_1).state);
              it.printf(1, 192, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV2 %3.0f W", id(pv_power_2).state);
              it.printf(160, 152, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_0).state);
              it.printf(160, 172, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_1).state);
              it.printf(160, 192, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_2).state);
            }

            if (!isnan(id(battery_0_level).state)) {
              widget::hbar(&it, 170, 154, 75, 20, 100, id(SmallFont), 0, id(battery_0_level));
              widget::hbar(&it, 170, 174, 75, 20, 100, id(SmallFont), 90, id(battery_1_level));
              widget::hbar(&it, 170, 194, 75, 20, 100, id(SmallFont), 180, id(battery_2_level));
              widget::hbar(&it, 170, 214, 75, 20, 100, id(SmallFont), 270, id(battery_3_level));
            }
          }
      - id: weather
        lambda: |- #cpp
          widget::TimeWidget(&it);
          auto w = new widget::WeatherWidget(&it);
          w->draw(weather_condition, outside_temp, humidity, temperature);

          // auto time = id(sntp_time).now();
          // if (time.is_valid()) {
          //   it.strftime(0, 0, id(LargeFont),TextAlign::TOP_LEFT, "%Y-%m-%d", time);
          //   it.strftime(312, 0, id(LargeFont),TextAlign::TOP_RIGHT, "%H:%M", time);
          //   auto lineColor = Color(250, 250, 0);
          //   it.horizontal_line(0, 31, 320, lineColor.fade_to_black(200));
          //   it.horizontal_line(0, 32, 318, lineColor.fade_to_black(150));
          //   it.horizontal_line(0, 33, 316, lineColor.fade_to_black(100));
          //   it.horizontal_line(0, 34, 314, lineColor);
          // }
