

text_sensor:
  - platform: homeassistant
    id: weather_condition
    entity_id: weather.kbbg_daynight
    name: "Weather"
    internal: true

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: htu21d
    update_interval: 60s
    temperature:
      id: temperature
      name: "Temperature"
      #filters:
      #  - lambda: return x * (9.0/5.0) + 32.0;
      unit_of_measurement: "°C"
    humidity:
      id: humidity
      name: "Humidity"
      unit_of_measurement: "%"
      device_class: humidity
      icon: "mdi:water-percent"

  - platform: bme280
    address: 0x76
    update_interval: 60s
    iir_filter: 2x
    temperature:
      id: bme280_temperature
      name: "Temperature (BME280)"
      oversampling: 2x
      unit_of_measurement: "°C"
      device_class: temperature
    pressure:
      oversampling: 2x
      id: atmospheric_pressure
      name: "Atmospheric Pressure"
      device_class: atmospheric_pressure
      accuracy_decimals: 2
    humidity:
      id: humidity2
      oversampling: 2x
      name: "Humidity (bme280)"
      device_class: humidity
      accuracy_decimals: 2

  - platform: template
    name: "Equivalent sea level pressure"
    id: sea_level_pressure
    update_interval: 60s
    unit_of_measurement: 'hPa'
    accuracy_decimals: 3
    device_class: atmospheric_pressure
    lambda: |-
      float TEMPERATURE = 0;
      std::string unit;
      if (id(average_temperature).has_state()) {
        TEMPERATURE = id(average_temperature).state;
        unit = id(average_temperature).get_unit_of_measurement();
      } else {
        TEMPERATURE = id(outside_temperature).state;
        unit = id(outside_temperature).get_unit_of_measurement();
      }
      if (unit == "°F") {
        TEMPERATURE = (TEMPERATURE - 32) * (5/9);
      }
      if (!id(atmospheric_pressure).has_state()
          || isnan(id(atmospheric_pressure).state)) {
            return {};
      }
      const float ALTITUDE = 380; // meters
      const float PRESSURE = id(atmospheric_pressure).state; // instantaneous atmospheric pressure reading

      const float TEMP_K = TEMPERATURE + 273.15;
      const float LAPSE_RATE = 0.0065;        // degrees K per meter altitude
      const float LAPSE_AMOUNT = LAPSE_RATE * ALTITUDE;
      return PRESSURE / powf(1 - (LAPSE_AMOUNT / (TEMPERATURE + 273.15)), 5.2558);
      // powf(1 - (
      //             (0.0065 * STANDARD_ALTITUDE) /
      //             (bme280_temperature + (0.0065 * STANDARD_ALTITUDE) + 273.15)
      //           ), 5.257);


  - platform: homeassistant
    name: "Outside Temperature"
    id: outside_temperature
    entity_id: sensor.outside_temperature
    unit_of_measurement: "°F"
    internal: true
  - platform: homeassistant
    name: "Average Outside Temperature"
    id: average_temperature
    entity_id: sensor.12_hour_average_temperature
    unit_of_measurement: "°F"
    internal: true


