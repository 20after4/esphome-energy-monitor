
esphome:
  name: esp32-m5stack-lcd
  #libraries:
    #- "light"
  includes:
    - lcd.h
    #- src/esphome/components/light/esp_hsv_color.h
  platformio_options:
    board_build.flash_mode: dio
    board_build.f_cpu: 240000000L
    board_build.f_flash: 40000000L
    board_build.flash_size: 4MB
    board_upload.flash_size: 4MB
esp32:
  board: m5stack-grey
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${devicename} Hotspot"
    password: !secret wifi_password

ota:
mdns:
logger:
  level: INFO

time:
  - platform: sntp
    id: sntp_time
    servers:
      - 10.1.1.1
      - 0.pool.ntp.org
      - 1.pool.ntp.org
api:
  reboot_timeout: 10min

# image:
#   - file: "boom.png"
#     id: myimage
#     resize: 100x100
#     type: RGB24

light:

color:
  - id: my_red
    red: 100%
    green: 20%
    blue: 20%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 20%
    green: 20%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: black
    red: 0%
    green: 0%
    blue: 0%
  - id: white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "gfonts://Share Tech Mono"
    id: LargeFont
    size: 28
  - file: "gfonts://Inconsolata"
    id: SmallFont
    size: 16


image:
  - file: mdi:weather-night
    id: clearnight
    resize: 64x64
  - file: mdi:weather-sunny
    id: sunny
    resize: 64x64
  - file: mdi:weather-cloudy
    id: cloudy
    resize: 64x64
  - file: mdi:weather-partly-cloudy
    id: partlycloudy
    resize: 64x64
  - file: mdi:weather-night-partly-cloudy
    id: partlycloudynight
    resize: 64x64
  - file: mdi:weather-hail
    id: hail
    resize: 64x64
  - file: mdi:weather-rainy
    id: rain
    resize: 64x64
  - file: mdi:weather-snowy
    id: snow
    resize: 64x64
  - file: mdi:weather-fog
    id: fog
    resize: 64x64
  - file: mdi:weather-windy
    id: wind
    resize: 64x64
  - file: mdi:weather-lightning
    id: lightning
    resize: 64x64

graph:
  - id: multi_voltage_graph
    duration: 90min
    x_grid: 15min
    y_grid: 8
    width: 314
    height: 120
    traces:
      - sensor: pv_power_0
        line_type: SOLID
        line_thickness: 2
        color: my_red
      - sensor: pv_power_1
        line_type: SOLID
        line_thickness: 2
        color: my_blue
      - sensor: pv_power_2
        line_type: SOLID
        line_thickness: 2
        color: my_green


spi:
  clk_pin: 18
  mosi_pin: 23
  # miso_pin: 25

i2c:
  sda: 21
  scl: 22

display:
  - platform: ili9xxx
    model: M5STACK
    update_interval: 5s
    auto_clear_enabled: true
    dc_pin: 27
    cs_pin: 14
    reset_pin: 33
    data_rate: 40000000
    id: tft_ha
    invert_display: false
    pages:
      - id: loading
        lambda: |- #cpp
          auto time = id(sntp_time).now();

          if (time.is_valid()) {
            it.strftime(160, 120, id(LargeFont), Color(220,220,220), TextAlign::CENTER, "%Y-%m-%d %H:%M", time);
          } else {
            it.printf(160, 120, id(LargeFont), TextAlign::CENTER, "Loading...");
          }
      - id: energy
        lambda: |- #cpp
          auto time = id(sntp_time).now();
          if (time.is_valid()) {

            it.strftime(0, 0, id(LargeFont),TextAlign::TOP_LEFT, "%Y-%m-%d", time);
            it.strftime(310, 0, id(LargeFont),TextAlign::TOP_RIGHT, "%H:%M", time);

            auto graph = id(multi_voltage_graph);
            it.graph(3, 32, id(multi_voltage_graph), my_red);

            if (id(pv_power_0).has_state()) {
              it.printf(1, 152, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV0 %3.0f W", id(pv_power_0).state);
              it.printf(1, 172, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV1 %3.0f W", id(pv_power_1).state);
              it.printf(1, 192, id(SmallFont), Color(220,220,220), TextAlign::TOP_LEFT, "PV2 %3.0f W", id(pv_power_2).state);
              it.printf(160, 152, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_0).state);
              it.printf(160, 172, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_1).state);
              it.printf(160, 192, id(SmallFont), Color(220,220,220), TextAlign::TOP_RIGHT, "%1.3f kWh", id(pv_yield_2).state);
            }

            if (!isnan(id(battery_0_level).state)) {
              esphome::display::hbar(&it, 170, 154, 75, 20, 100, id(SmallFont), 0, id(battery_0_level));
              esphome::display::hbar(&it, 170, 174, 75, 20, 100, id(SmallFont), 120, id(battery_1_level));
              esphome::display::hbar(&it, 170, 194, 75, 20, 100, id(SmallFont), 240, id(battery_2_level));
            }
          }
      - id: weather
        lambda: |- #cpp
          static std::map<std::string, BaseImage*> weather_state {
              { "sunny", id(sunny) },
              { "clear-night", id(clearnight) },
              { "cloudy", id(cloudy) },
              { "partlycloudy", id(partlycloudy) },
              { "partly-cloudy-night", id(partlycloudynight) },
              { "rainy", id(rain) },
              { "pouring", id(rain) },
              { "hail", id(hail) },
              { "snowy", id(snow) },
              { "windy", id(wind) },
              { "fog", id(fog) },
              { "lightning", id(lightning) }
          };
          if (id(outside_temp).has_state()) {

            float min_temp = 30; // Blue color
            float max_temp = 90.0; // Red color
            float current_temp = id(outside_temp).state;
            if (current_temp < min_temp) current_temp = min_temp;
            if (current_temp > max_temp) current_temp = max_temp;

            float ratio = (current_temp - min_temp) / (max_temp - min_temp);
            float hue = 220 - (ratio*140);
            auto shadow_color = ESPHSVColor(hue, 150, 50).to_rgb();
            auto highlight_color = ESPHSVColor(hue, 200, 250).to_rgb();
            auto textcolor = ESPHSVColor(hue, 250, 100).to_rgb();
            it.printf(10, 66, id(LargeFont), Color(200, 200, 200), TextAlign::TOP_LEFT, "Outside");
            it.printf(200, 65, id(LargeFont), highlight_color, TextAlign::TOP_RIGHT, "%4.0f°F", id(outside_temp).state);
            it.printf(202, 67, id(LargeFont), shadow_color, TextAlign::TOP_RIGHT, "%4.0f°F", id(outside_temp).state);
            it.printf(201, 66, id(LargeFont), textcolor, TextAlign::TOP_RIGHT, "%4.0f°F", id(outside_temp).state);
          }
          it.line(10, 105, 310, 105, Color(200, 200, 200));
          it.printf(10, 110, id(LargeFont), Color(200, 200, 200), TextAlign::TOP_LEFT, "Inside");
          it.printf(210, 110, id(LargeFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, "%4.1f°F", id(temperature).state);
          it.printf(315, 110, id(SmallFont), Color(200, 200, 200), TextAlign::TOP_RIGHT, "%1.1f %%", id(humidity).state);

          if (id(weather_condition).has_state()) {
            auto weather_icon = weather_state.find(id(weather_condition).state);
            if (weather_icon != weather_state.end()) {
              it.image(310, 40, weather_icon->second,  ImageAlign::TOP_RIGHT);

            } else {
              it.printf(310, 45, id(LargeFont), TextAlign::TOP_RIGHT, id(weather_condition).state.c_str());
              it.printf(310, 47, id(LargeFont), TextAlign::TOP_RIGHT, id(weather_condition).state.c_str());
              it.printf(310, 46, id(LargeFont), TextAlign::TOP_RIGHT, id(weather_condition).state.c_str());
            }
          }
          auto time = id(sntp_time).now();
          if (time.is_valid()) {
            it.strftime(0, 0, id(LargeFont),TextAlign::TOP_LEFT, "%Y-%m-%d", time);
            it.strftime(310, 0, id(LargeFont),TextAlign::TOP_RIGHT, "%H:%M", time);
            it.line(0, 30, 320, 30, Color(200, 200, 200));
            it.line(0, 31, 320, 31, Color(120, 120, 120));
          }
switch:
  - platform: gpio
    pin: 32
    name: "Display Backlight"
    id: backlight
    inverted: false
    restore_mode: ALWAYS_ON

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: gpio
    pin: 39
    internal: true
    id: button_a
    on_press:
      - display.page.show_previous: tft_ha
      - component.update: tft_ha
  - platform: gpio
    pin: 38
    name: "Button B"
    id: button_b
    internal: true
    on_press:
      - switch.toggle: backlight
  - platform: gpio
    pin: 37
    name: "Button C"
    id: button_c
    internal: true
    on_press:
      - display.page.show_next: tft_ha
      - component.update: tft_ha

text_sensor:
  - platform: homeassistant
    id: weather_condition
    entity_id: weather.kbbg_daynight
    name: "Weather"
    internal: true

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: htu21d
    temperature:
      id: temperature
      name: "Temperature"
      filters:
      - lambda: return x * (9.0/5.0) + 32.0;
      unit_of_measurement: "°F"
    humidity:
      id: humidity
      name: "Humidity"
  - platform: homeassistant
    name: "BMS0 SOC"
    id: battery_0_level
    entity_id: sensor.bms0_state_of_charge_2
    unit_of_measurement: "%"
    internal: true
  - platform: homeassistant
    name: "BMS1 SOC"
    id: battery_1_level
    entity_id: sensor.bms1_state_of_charge_2
    unit_of_measurement: "%"
    internal: true
  - platform: homeassistant
    name: "BMS2 SOC"
    id: battery_2_level
    entity_id: sensor.bms2_state_of_charge
    unit_of_measurement: "%"
    internal: true
  - platform: homeassistant
    id: outside_temp
    entity_id: weather.kbbg_daynight
    attribute: temperature
    unit_of_measurement: "°F"
    internal: true
  - platform: homeassistant
    id: pv_power_0
    name: "PV0"
    entity_id: sensor.victron0_pv_power_2
    unit_of_measurement: "W"
    internal: true
  - platform: homeassistant
    id: pv_power_1
    entity_id: sensor.victron1_pv_power
    unit_of_measurement: "W"
    internal: true
    name: "PV1"
  - platform: homeassistant
    id: pv_power_2
    entity_id: sensor.victron3_pv_power
    unit_of_measurement: "W"
    internal: true
    name: "PV3"
  - platform: homeassistant
    id: pv_yield_0
    entity_id: sensor.victron0_yield_today
    unit_of_measurement: "kWh"
    internal: true
    name: "Yield0"
  - platform: homeassistant
    id: pv_yield_1
    entity_id: sensor.victron1_yield_today
    unit_of_measurement: "kWh"
    internal: true
    name: "Yield1"
  - platform: homeassistant
    id: pv_yield_2
    entity_id: sensor.victron3_yield_today
    unit_of_measurement: "kWh"
    internal: true
    name: "Yield2"
