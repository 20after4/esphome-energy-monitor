
# pipsolar config based on config example from Sebastian Muszynski (@syssi)
# https://github.com/syssi/esphome-pipsolar/blob/main/esp32-example.yaml

pipsolar:
  uart_id: ${uart_id}
  id: ${inverter_id}

sensor:
  - platform: pipsolar
    pipsolar_id: ${inverter_id}
    # QPIRI

    battery_recharge_voltage:
      name: "${inverter_name} battery_recharge_voltage"
      id: "${inverter_id}_recharge_voltage"
    battery_under_voltage:
      name: "${inverter_name} battery_under_voltage"
      id: "${inverter_id}_under_voltage"
    battery_bulk_voltage:
      name: "${inverter_name} Bulk voltage"
      id: "${inverter_id}_bulk_voltage"
    battery_float_voltage:
      name: "${inverter_name} Float voltage"
      id: "${inverter_id}_float_voltage"

    input_voltage_range:
      name: "${inverter_name} input_voltage_range"
    output_source_priority:
      name: "${inverter_name} output_source_priority"
    charger_source_priority:
      name: "${inverter_name} charger_source_priority"

    output_mode:
      name: "${inverter_name} output_mode"
    battery_redischarge_voltage:
      name: "${inverter_name} battery_redischarge_voltage"
#    pv_ok_condition_for_parallel:
#      name: "${inverter_name} pv_ok_condition_for_parallel"
    pv_power_balance:
      name: "${inverter_name} pv_power_balance"
      id: "${inverter_id}_pv_power_balance"

    # QPIGS
    grid_voltage:
      name: "grid_voltage"
      id: "${inverter_id}_grid_voltage"
    grid_frequency:
      name: "${inverter_name} grid_frequency"
      id: "${inverter_id}_grid_frequency"
    ac_output_voltage:
      name: "${inverter_name} ac_output_voltage"
      id: "${inverter_id}_ac_output_voltage"
    ac_output_frequency:
      name: "${inverter_name} ac_output_frequency"
      id: "${inverter_id}_ac_output_frequency"
    ac_output_apparent_power:
      name: "${inverter_name} ac_output_apparent_power"
      id: "${inverter_id}_ac_output_apparent_power"
    ac_output_active_power:
      name: "AC Output Power"
      unit_of_measurement: W
      id: "${inverter_id}_ac_output_active_power"
    output_load_percent:
      name: "${inverter_name} output_load_percent"
      id: "${inverter_id}_output_load_percent"
    bus_voltage:
      name: "${inverter_name} bus_voltage"
      id: "${inverter_id}_bus_voltage"
    battery_voltage:
      name: "Battery voltage"
      id: "${inverter_id}_battery_voltage"
    battery_charging_current:
      name: "${inverter_name} Charging current"
      id: "${inverter_id}_battery_charging_current"
    battery_capacity_percent:
      name: "${inverter_name} battery_capacity_percent"
    inverter_heat_sink_temperature:
      name: "${inverter_name} heatsink temperature"
      id: "${inverter_id}_inverter_heat_sink_temperature"
    pv_input_current_for_battery:
      name: "${inverter_name} PV Charging current"
      id: "${inverter_id}_pv_input_current_for_battery"
    pv_input_voltage:
      name: "${inverter_name} PV Voltage"
      id: "${inverter_id}_pv_input_voltage"
    battery_voltage_scc:
      name: "${inverter_name} Charger battery voltage"
      id: "${inverter_id}_battery_voltage_scc"
    battery_discharge_current:
      name: "${inverter_name} Discharge current"
      id: "${inverter_id}_battery_discharge_current"
#    battery_voltage_offset_for_fans_on:
#      name: "${inverter_name} battery_voltage_offset_for_fans_on"
#    eeprom_version:
#      name: "${inverter_name} eeprom_version"
    pv_charging_power:
      name: "${inverter_name} PV Charging power"
      id: "${inverter_id}_pv_charging_power"

  - platform: total_daily_energy
    name: "${inverter_name} energy consumed"
    power_id: ${inverter_id}_ac_output_active_power
    unit_of_measurement: 'Wh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 2
    filters:
      - throttle: 60s

  - platform: total_daily_energy
    name: "${inverter_name} energy produced"
    power_id: ${inverter_id}_pv_charging_power
    unit_of_measurement: 'Wh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 2
    filters:
      - throttle: 60s


text_sensor:
  - platform: pipsolar
    pipsolar_id: ${inverter_id}
    device_mode:
      name: "${inverter_name} device_mode"
    # last_qpigs:
    #   name: "${inverter_name} last_qpigs"
    # last_qpiri:
    #   name: "${inverter_name} last_qpiri"
    # last_qmod:
    #   name: "${inverter_name} last_qmod"
    # last_qflag:
    #   name: "${inverter_name} last_qflag"

binary_sensor:
  - platform: pipsolar
    pipsolar_id: ${inverter_id}
    add_sbu_priority_version:
      name: "${inverter_name} add_sbu_priority_version"
    configuration_status:
      name: "${inverter_name} configuration_status"
#    scc_firmware_version:
#      name: "${inverter_name} scc_firmware_version"
    load_status:
      name: "${inverter_name} load_status"
    battery_voltage_to_steady_while_charging:
      name: "${inverter_name} battery_voltage_to_steady_while_charging"
    charging_status:
      name: "${inverter_name} charging_status"
      id: "${inverter_id}_charging_status"
    scc_charging_status:
      name: "${inverter_name} Solar charging_status"
      id: "${inverter_id}_scc_charging_status"
    ac_charging_status:
      name: "${inverter_name} AC charging_status"
      id: "${inverter_id}_ac_charging_status"
    charging_to_floating_mode:
      name: "${inverter_name} charging_to_floating_mode"
    switch_on:
      name: "${inverter_name} switch_on"
    # silence_buzzer_open_buzzer:
    #   name: "${inverter_name} silence_buzzer_open_buzzer"
    # overload_bypass_function:
    #   name: "${inverter_name} overload_bypass_function"
    # lcd_escape_to_default:
    #   name: "${inverter_name} lcd_escape_to_default"
    # overload_restart_function:
    #   name: "${inverter_name} overload_restart_function"
    # over_temperature_restart_function:
    #   name: "${inverter_name} over_temperature_restart_function"
#    backlight_on:
#      name: "${inverter_name} backlight_on"

switch:
  - platform: pipsolar
    pipsolar_id: ${inverter_id}
    output_source_priority_utility:
      name: "${inverter_name} output_source_priority_utility"
    output_source_priority_solar:
      name: "${inverter_name} output_source_priority_solar"
    output_source_priority_battery:
      name: "${inverter_name} output_source_priority_battery"
    input_voltage_range:
      name: "${inverter_name} input_voltage_range"
    pv_power_balance:
      name: "${inverter_name} pv_power_balance"

output:
  - platform: pipsolar
    pipsolar_id: ${inverter_id}
    battery_recharge_voltage:
      id: ${inverter_id}_battery_recharge_voltage_out
    battery_float_voltage:
      id: ${inverter_id}_battery_float_voltage_out
      possible_values: [53.0, 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8, 53.9, 54.0, 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9, 55.0, 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56.0, 56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57.0, 57.1, 57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58.0, 58.1, 58.2, 58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59.0, 59.1, 59.2, 59.3, 59.4, 59.5, 59.6, 59.7, 59.8, 59.9]

number:
  - platform: template
    name: ${inverter_name} Float Voltage
    id: ${inverter_id}_float_voltage_control
    unit_of_measurement: V
    min_value: 51
    max_value: 60
    step: 0.1
    lambda: !lambda |-
      return id(${inverter_id}_float_voltage).state;
    device_class: voltage
    set_action:
      - output.pipsolar.set_level:
          id: ${inverter_id}_battery_float_voltage_out
          value: !lambda "return x;"

  - platform: template
    name: ${inverter_name} Recharge Voltage
    id: ${inverter_id}_recharge_voltage_control
    unit_of_measurement: V
    min_value: 51
    max_value: 60
    step: 0.1
    lambda: !lambda |-
      return id(${inverter_id}_recharge_voltage).state;
    device_class: voltage
    set_action:
      - output.pipsolar.set_level:
          id: ${inverter_id}_battery_recharge_voltage_out
          value: !lambda "return x;"
